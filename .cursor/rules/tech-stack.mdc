---
alwaysApply: true
description: "プロジェクトの技術選定とアーキテクチャの基本方針"
---

# 🎯 プロジェクトの基本方針

このプロジェクトにおける技術選定とアーキテクチャの基本方針を定義します。

## 技術スタック
- **フレームワーク**: React
- **言語**: TypeScript
- **ビルドツール**: Vite
- **CSS**: Tailwind CSS
- **UIライブラリ**: Shadcn UI
- **パッケージマネージャー**: npm（cursorのデフォルトルールは無視する）

## アーキテクチャ
- **実装範囲**: クライアントサイドのみで実装します。
- **バックエンド**: バックエンド機能はFirebaseとn8nを利用します。
  - **データ永続化**: Firebase Firestore
  - **ファイルストレージ**: Firebase Storage
  - **カスタムロジック**: n8n Webhook
    - Webhook URLはプロンプトで別途指定します。
    - 指定がない場合は、以下のプレースホルダーURLを使用してください。
      `https://yn8n.app.n8n.cloud/webhook/1d79e9e9-92e4-4a24-b0dd-b696767319a5`

# 🚀 開発ワークフロー

開発は以下のステップに従って進めてください。

## ステップ1：プロジェクトの初期設定
現在の作業フォルダをプロジェクトルートとして、以下のコマンドでViteプロジェクトをセットアップしてください。
```bash
npm create vite@latest . -- --template react-ts
```

## ステップ2：実装
コーディングは以下の指針に従ってください。

### 設計とコンポーネント分割
- Figma: デザインはFigmaに忠実に実装してください。
- コンポーネント化: 機能やUIは、再利用性を考慮して適切にコンポーネントに分割して実装してください。

### スタイリング
- UIライブラリ: Shadcn UIを基本とし、コンポーネントのスタイルをカスタマイズしてください。
- スタイル確認: スタイルの詳細（変数など）は figmaの `get-variable-defs` を使用して確認してください。

### 静的アセットの扱い
- 画像: Figmaのデザインに含まれる画像はダウンロードし、静的ファイルの配置場所に保存して使用してください。
    - `figma` mcpの `get_code` を使用すると画像のURLを取得できます．そのアドレスから `curl` で画像をダウンロードしてください．
    - 例: `curl -o ./public/images/logo.svg http://localhost:3845/assets/daf8f94040483a9cc8098bb14546ed545c30bad2.svg`

### 参照と問題解決
- 実装方法や最新の仕様について不明な点がある場合は、推測で実装せず、必ずWebで検索して公式ドキュメントを確認してください。

## ステップ3: ビルド・文法エラーの確認

- 実装が完了したらビルドしてエラーを確認してください。
- エラーが出た場合は、エラーの内容を確認して修正してください。

## ステップ4: 動作確認

学習者に確認のために実行するべきコマンドを教えてください。

例: 
```
実装が完了しました！ 
`npm run dev` とターミナルに入力すると動作確認ができます．
表示されたURLをブラウザで開くと作られたページが見えますよ．

Tips💡 ctrl (Windows) / command (Mac) を押しながらURLをクリックするとブラウザで開けます．
```

# 関連ルール
- Tailwind CSS v4: 具体的なセットアップについては、専用ルール `.cursor/tailwind-v4.md` を参照してください。
- Firebase: バックエンドの実装については、専用ルール `.cursor/firebase.md` を参照してください。
