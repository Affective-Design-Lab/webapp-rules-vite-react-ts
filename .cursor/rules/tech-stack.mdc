---
alwaysApply: true
description: "プロジェクトの技術選定とアーキテクチャの基本方針"
---

# 🎯 プロジェクト基本方針

## 技術スタック
- **フレームワーク**: React + TypeScript + Vite
- **スタイリング**: Tailwind CSS v4 + Shadcn UI
- **パッケージマネージャー**: npm（cursorのデフォルトルールは無視する）

## アーキテクチャ
- **実装範囲**: クライアントサイドのみ
- **バックエンド**: Firebase + n8n
  - **データ保存**: Firebase Firestore
  - **ファイル**: Firebase Storage
  - **カスタムロジック**: n8n Webhook
    - デフォルト: `https://yn8n.app.n8n.cloud/webhook/1d79e9e9-92e4-4a24-b0dd-b696767319a5`

## 開発フロー

### プロジェクト初期化
```bash
npm create vite@latest . -- --template react-ts
```

### 実装指針
- **Figma連携**: デザインに忠実な実装
- **コンポーネント分割**: コードの可読性を重視
- **画像取得**: Figma MCP `get_code` → `curl`でダウンロード

### スタイリング
- UIライブラリ: Shadcn UIを基本とし、コンポーネントのスタイルをカスタマイズしてください。
- スタイル確認: スタイルの詳細（変数など）は figmaの `get-variable-defs` を使用して確認してください。

### 静的アセットの扱い
- 画像: Figmaのデザインに含まれる画像はダウンロードし、静的ファイルの配置場所に保存して使用してください。
    - `figma` mcpの `get_code` を使用すると画像のURLを取得できます．そのアドレスから `curl` で画像をダウンロードしてください．
    - 例: `curl -o ./public/images/logo.svg http://localhost:3845/assets/daf8f94040483a9cc8098bb14546ed545c30bad2.svg`

### 完了時の確認
1. ビルドエラーの確認・修正
2. 動作確認方法を学習者に案内
3. README更新（日本語）

**学習者への案内例**:
```
実装が完了しました！
`npm run dev` で動作確認ができます。
表示されたURLをブラウザで開いてください。
```

# 関連ルール
- Tailwind CSS v4: 具体的なセットアップについては、専用ルール `.cursor/tailwind-v4.md` を参照してください。
- Firebase: バックエンドの実装については、専用ルール `.cursor/firebase.md` を参照してください。
